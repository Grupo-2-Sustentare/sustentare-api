name: CI/CD Workflow

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      # Checkout do código
      - name: Checkout repository
        uses: actions/checkout@v3

      # Configuração do Java
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Construção do projeto com Maven
      - name: Build with Maven
        run: |
          mvn -f sustentaree/pom.xml clean install -DskipTests
          ls sustentaree/target/

      # Upload do artefato JAR gerado
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: sustentare-api
          path: sustentaree/target/*.jar

  deploy:
    needs: build
    runs-on: ubuntu-22.04
    steps:
      # Baixar o artefato JAR do job anterior
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: sustentare-api
          path: ./sustentare-api/

      # Criar arquivo .pem para acesso à EC2 pública
      - name: Criar arquivo .pem para acesso à EC2 (Pública)
        run: |
          echo "${{ secrets.PUBLIC_DEPLOY_KEY }}" > $HOME/${{ secrets.NOME_ARQUIVO_PEM_PUBLICA }}
          chmod 400 $HOME/${{ secrets.NOME_ARQUIVO_PEM_PUBLICA }}

      # Criar arquivo .pem para acesso à EC2 privada
      - name: Criar arquivo .pem para acesso à EC2 (Privada)
        run: |
          echo "${{ secrets.PRIVATE_DEPLOY_KEY }}" > $HOME/${{ secrets.NOME_ARQUIVO_PEM_PRIVADA }}
          chmod 400 $HOME/${{ secrets.NOME_ARQUIVO_PEM_PRIVADA }}

      # Configurar túnel SSH para acessar a EC2 privada
      - name: Configurar túnel SSH para acessar a EC2 privada
        run: |
          ssh -i $HOME/${{ secrets.NOME_ARQUIVO_PEM_PUBLICA }} -o StrictHostKeyChecking=no -f -N -L 2222:${{ secrets.PRIVATE_EC2_IP }}:22 ubuntu@${{ secrets.PUBLIC_DEPLOY_HOST }}
          echo "Túnel SSH configurado: localhost:2222 -> ${{ secrets.PRIVATE_EC2_IP }}:22"

      # Garantir que a pasta target exista na EC2 privada
      - name: Criar pasta target na instância EC2 privada
        run: |
          ssh -i $HOME/${{ secrets.NOME_ARQUIVO_PEM_PRIVADA }} -o StrictHostKeyChecking=no -p 2222 ubuntu@localhost << 'EOF'
            mkdir -p /home/ubuntu/sustentare-api/target
          EOF

      # Transferir toda a pasta target para a instância EC2 privada
      - name: Transferir toda a pasta target para a instância EC2 privada
        run: |
          scp -i $HOME/${{ secrets.NOME_ARQUIVO_PEM_PRIVADA }} -o StrictHostKeyChecking=no -P 2222 -r ./sustentaree/target ubuntu@localhost:/home/ubuntu/sustentare-api/

      # Reinício da aplicação na instância EC2 privada
      - name: Reiniciar aplicação na instância EC2 privada
        run: |
          ssh -i $HOME/${{ secrets.NOME_ARQUIVO_PEM_PRIVADA }} -o StrictHostKeyChecking=no -p 2222 ubuntu@localhost << 'EOF'
            cd /home/ubuntu/sustentare-api
            if [ -f "api.pid" ]; then
              echo "Parando aplicação existente..."
              kill -9 $(cat api.pid) || true
              rm api.pid
            fi
            echo "Iniciando nova aplicação..."
            nohup java -jar -Dspring.profiles.active=prod target/$(ls target | grep .jar) > application.log 2>&1 &
            echo $! > api.pid
          EOF
